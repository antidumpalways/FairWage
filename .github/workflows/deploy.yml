name: 🚀 Deploy FairWage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  RUST_VERSION: '1.70'

jobs:
  # Test and Build
  test-and-build:
    runs-on: ubuntu-latest
    name: 🧪 Test & Build
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🦀 Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: wasm32-unknown-unknown
          override: true
          
      - name: 📦 Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: 🔨 Build Rust contracts
        run: |
          cd Backend
          cargo build --target wasm32-unknown-unknown --release
          
      - name: 📋 List build artifacts
        run: |
          ls -la Backend/target/wasm32-unknown-unknown/release/
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: Frontend/package-lock.json
          
      - name: 📦 Install Frontend dependencies
        run: |
          cd Frontend
          npm ci
          
      - name: 🧪 Run Frontend tests
        run: |
          cd Frontend
          npm run lint
          npm run build
          
      - name: 📦 Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            Frontend/.next
            Frontend/out
          key: ${{ runner.os }}-nextjs-${{ hashFiles('Frontend/package-lock.json') }}
          
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            Backend/target/wasm32-unknown-unknown/release/*.wasm
            Frontend/.next
            Frontend/out

  # Deploy to Testnet (on main branch)
  deploy-testnet:
    needs: test-and-build
    runs-on: ubuntu-latest
    name: 🌐 Deploy to Testnet
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          
      - name: 🦀 Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: wasm32-unknown-unknown
          override: true
          
      - name: 🔧 Setup Soroban CLI
        run: |
          curl -sSfL https://soroban.stellar.org/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
      - name: 🚀 Deploy to Testnet
        env:
          SOROBAN_NETWORK: testnet
          SOROBAN_RPC_URL: https://soroban-testnet.stellar.org
          SOROBAN_NETWORK_PASSPHRASE: "Test SDF Network ; September 2015"
        run: |
          echo "🚀 Deploying FairWage contract to testnet..."
          
          # Install WASM to network
          WASM_HASH=$(soroban contract install \
            --wasm Backend/target/wasm32-unknown-unknown/release/fair_wage_contract.wasm \
            --network testnet)
          
          echo "✅ WASM installed with hash: $WASM_HASH"
          echo "WASM_HASH=$WASM_HASH" >> $GITHUB_ENV
          
          # Deploy contract
          CONTRACT_ID=$(soroban contract deploy \
            --wasm-hash $WASM_HASH \
            --network testnet)
          
          echo "✅ Contract deployed with ID: $CONTRACT_ID"
          echo "CONTRACT_ID=$CONTRACT_ID" >> $GITHUB_ENV
          
      - name: 📋 Create deployment summary
        run: |
          echo "## 🚀 Testnet Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**WASM Hash:** \`${{ env.WASM_HASH }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Contract ID:** \`${{ env.CONTRACT_ID }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Network:** Testnet" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Successfully deployed" >> $GITHUB_STEP_SUMMARY

  # Deploy Frontend to Vercel (on main branch)
  deploy-frontend:
    needs: test-and-build
    runs-on: ubuntu-latest
    name: 🌐 Deploy Frontend
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: Frontend/package-lock.json
          
      - name: 📦 Install Frontend dependencies
        run: |
          cd Frontend
          npm ci
          
      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./Frontend
          vercel-args: '--prod'

  # Security and Quality Checks
  security:
    runs-on: ubuntu-latest
    name: 🔒 Security & Quality
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: Frontend/package-lock.json
          
      - name: 📦 Install dependencies
        run: |
          cd Frontend
          npm ci
          
      - name: 🔍 Run security audit
        run: |
          cd Frontend
          npm audit --audit-level moderate
          
      - name: 🧹 Run linting
        run: |
          cd Frontend
          npm run lint
          
      - name: 📊 Check bundle size
        run: |
          cd Frontend
          npm run build
          npx @next/bundle-analyzer

  # Notify on completion
  notify:
    needs: [deploy-testnet, deploy-frontend, security]
    runs-on: ubuntu-latest
    name: 📢 Notify Team
    if: always()
    
    steps:
      - name: 📊 Deployment Status
        run: |
          if [ "${{ needs.deploy-testnet.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
            echo "🎉 All deployments successful!"
            echo "✅ Testnet: ${{ needs.deploy-testnet.result }}"
            echo "✅ Frontend: ${{ needs.deploy-frontend.result }}"
            echo "✅ Security: ${{ needs.security.result }}"
          else
            echo "❌ Some deployments failed"
            echo "Testnet: ${{ needs.deploy-testnet.result }}"
            echo "Frontend: ${{ needs.deploy-frontend.result }}"
            echo "Security: ${{ needs.security.result }}"
            exit 1
          fi
