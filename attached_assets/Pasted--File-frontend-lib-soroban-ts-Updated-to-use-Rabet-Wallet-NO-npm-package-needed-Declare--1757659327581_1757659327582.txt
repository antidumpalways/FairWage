// File: frontend/lib/soroban.ts
// Updated to use Rabet Wallet (NO npm package needed)

// Declare Rabet types
declare global {
  interface Window {
    rabet?: {
      connect(): Promise<{ publicKey: string; error?: string }>;
      sign(xdr: string, network: string): Promise<{ xdr: string; error?: string }>;
      disconnect(): Promise<void>;
      isUnlocked(): Promise<boolean>;
      close(): Promise<void>;
      on(event: string, handler: Function): void;
    };
  }
}

// HANYA SATU import statement - hapus yang duplikat
import * as StellarSdk from "@stellar/stellar-sdk";

// Configuration - Using Official Stellar SDK
const serverUrl = 'https://soroban-testnet.stellar.org';
const networkPassphrase = StellarSdk.Networks.TESTNET;
const FRIENDBOT_URL = 'https://friendbot.stellar.org';

// Get contract ID from localStorage or environment
const getContractId = (): string => {
    if (typeof window !== 'undefined') {
        const stored = localStorage.getItem('fairWageContractId');
        if (stored) return stored;
    }
    return process.env.NEXT_PUBLIC_FAIRWAGE_CONTRACT_ID || 'CCW45RYT7DTHNA4X2GFFZO5OV3CUFEXXGLVDNCZUVYNS57XBVKSDEYP3';
};

// Force TESTNET network type
const networkType: 'TESTNET' | 'PUBLIC' = 'TESTNET';

// Function to generate realistic mock contract IDs
const generateRealisticContractId = (): string => {
    const chars = '0123456789abcdef';
    let result = '';
    for (let i = 0; i < 64; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
};

// Initialize servers with proper error handling
let server: any = null;
let horizon: StellarSdk.Horizon.Server | null = null;

// Initialize servers safely
const initializeServers = () => {
    try {
        if (!server) {
            console.log('üîß Initializing Soroban Server...');
            server = new (StellarSdk as any).SorobanRpc.Server(serverUrl);
            console.log('‚úÖ Soroban Server initialized');
        }
        
        if (!horizon && typeof window !== 'undefined') {
            console.log('üîß Initializing Horizon Server...');
            horizon = new StellarSdk.Horizon.Server('https://horizon-testnet.stellar.org');
            console.log('‚úÖ Horizon Server initialized');
        }
} catch (error) {
        console.error('‚ùå Server initialization error:', error);
    }
};

// Initialize on module load (only in browser)
if (typeof window !== 'undefined') {
    initializeServers();
}

console.log('‚úÖ Stellar SDK module loaded');
console.log('üåê Network: TESTNET');

// Wallet connection function
export const connectWallet = async (): Promise<string> => {
    try {
        console.log('üîç Checking Rabet wallet...');
        
        if (typeof window === 'undefined') {
            throw new Error("Rabet wallet is not available in this environment");
        }
        
        // Check if Rabet extension is installed
        if (!window.rabet) {
            throw new Error("Rabet wallet is not installed! Please install Rabet extension first.");
        }
        
        console.log('‚úÖ Rabet is installed');

        // Connect to Rabet
        const result = await window.rabet.connect();
        
        if (result.error) {
            throw new Error(`Failed to connect to Rabet: ${result.error}`);
        }
        
        const publicKey = result.publicKey;
        console.log("üéâ Address received:", publicKey);
        
            return publicKey;
        
    } catch (error) {
        console.error("‚ùå Error connecting to Rabet wallet:", error);
        throw error;
    }
};

// Health check function
export const healthCheck = async (): Promise<{ success: boolean; message?: string }> => {
    try {
        console.log('üè• Checking backend health...');
        
        // Initialize servers if not already done
        if (!server) {
            initializeServers();
        }
        
        // Check Soroban network health
        if (server) {
            const latestLedger = await server.getLatestLedger();
            console.log('‚úÖ Soroban network healthy, ledger:', latestLedger.sequence);
        }
        
        // Check backend API health - FIXED URL
        const backendUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';
        const response = await fetch(`${backendUrl}/health`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        });
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Backend health check passed:', data);
            return { success: true, message: 'Backend is healthy' };
        } else {
            console.warn('‚ö†Ô∏è Backend health check failed with status:', response.status);
            return { success: false, message: `Backend returned status ${response.status}` };
        }
    } catch (error) {
        console.error('‚ùå Backend health check error:', error);
        return { success: false, message: error instanceof Error ? error.message : 'Unknown error' };
    }
};

// Generate keypair from Rabet (UPDATED - no more Freighter)
export const generateKeypairFromRabet = async () => {
    try {
        const publicKey = await connectWallet(); // Uses Rabet now
        
        console.log('‚úÖ Using Rabet signing API for deployment');
        console.log('üîê Rabet will handle transaction signing securely');
        
        return {
            publicKey: publicKey,
            useRabetSigning: true
        };
    } catch (error) {
        console.error('Failed to generate keypair:', error);
        throw error;
    }
};

// Simplified Token Contract Deployment
export const deployTokenContract = async (tokenName: string, tokenSymbol: string): Promise<string> => {
    try {
        console.log('üöÄ REAL Token Contract Deployment Starting...');
        console.log('üìã Token Name:', tokenName);
        console.log('üìã Token Symbol:', tokenSymbol);
        
        const publicKey = await connectWallet();
        
        // Get REAL transaction from backend
        const backendUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';
        const response = await fetch(`${backendUrl}/api/prepare-token-deploy`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userPublicKey: publicKey,
                tokenName,
                tokenSymbol
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`REAL deployment failed: ${errorData.error}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Got transaction XDR from backend');
        
        // TAMBAHAN: Log XDR untuk validasi di Stellar Labs
        console.log('üìã Transaction XDR:', result.transactionXdr);
        console.log('üîó Validate at: https://laboratory.stellar.org/#xdr-viewer');
        
        // Sign the REAL transaction with Rabet (instead of Freighter)
        console.log('üîê Signing transaction with Rabet...');
        
        if (!window.rabet) {
            throw new Error("Rabet wallet not available");
        }
        
        const signResult = await window.rabet.sign(result.transactionXdr, StellarSdk.Networks.TESTNET);
        
        if (signResult.error) {
            throw new Error(`Failed to sign with Rabet: ${signResult.error}`);
        }
        
        const signedXdr = signResult.xdr;
        console.log('‚úÖ Transaction signed successfully');
        
        // Submit the REAL signed transaction to Stellar network
        console.log('üì° Submitting to Stellar network...');
        const submitResponse = await fetch(`${backendUrl}/api/submit-transaction`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                signedTransactionXdr: signedXdr,  // GANTI dari signedXdr ke signedTransactionXdr
                tokenName,
                tokenSymbol
            })
        });
        
        if (!submitResponse.ok) {
            const errorData = await submitResponse.json();
            throw new Error(`Transaction submission failed: ${errorData.error}`);
        }
        
        const submitResult = await submitResponse.json();
        const contractId = submitResult.contractId;
        
        console.log('üéâ REAL Token Contract deployed successfully!');
        console.log('üìã Contract ID:', contractId);
        
        // Validate contract ID before proceeding
        if (!contractId) {
            throw new Error('Contract ID not returned from backend - deployment may have failed');
        }
        
        // Store the REAL contract ID
        if (typeof window !== 'undefined') {
            localStorage.setItem('tokenContractId', contractId);
        }
        
        return contractId;
        
    } catch (error) {
        console.error("‚ùå REAL Token Contract deployment failed!", error);
        throw error;
    }
};

// Simplified FairWage Contract Deployment
export const deployFairWageContract = async (tokenContractId: string): Promise<string> => {
    try {
        console.log('üöÄ Deploying FairWage Contract...');
        console.log('üìã Token Contract ID:', tokenContractId);
        
        // Use backend API for FairWage deployment
        const backendUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';
        const response = await fetch(`${backendUrl}/api/prepare-fairwage-deploy`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userPublicKey: await connectWallet(),
                tokenContractId: tokenContractId,
                companyName: 'FairWage Company' // Default company name
            })
        });
        
        if (!response.ok) {
            throw new Error(`Deployment failed with status ${response.status}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Got FairWage transaction XDR from backend');
        
        // Sign the FairWage transaction with Rabet
        console.log('üîê Signing FairWage transaction with Rabet...');
        
        if (!window.rabet) {
            throw new Error("Rabet wallet not available");
        }
        
        const signResult = await window.rabet.sign(result.transactionXdr, StellarSdk.Networks.TESTNET);
        
        if (signResult.error) {
            throw new Error(`Failed to sign with Rabet: ${signResult.error}`);
        }
        
        const signedXdr = signResult.xdr;
        console.log('‚úÖ FairWage transaction signed successfully');
        
        // Submit the signed transaction to backend
        console.log('üì° Submitting FairWage transaction to backend...');
        const submitResponse = await fetch(`${backendUrl}/api/submit-transaction`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                signedTransactionXdr: signedXdr,
                contractType: 'fairwage'
            })
        });
        
        if (!submitResponse.ok) {
            const errorData = await submitResponse.json();
            throw new Error(`FairWage transaction submission failed: ${errorData.error}`);
        }
        
        const submitResult = await submitResponse.json();
        const contractId = submitResult.contractId;
        
        console.log('‚úÖ FairWage Contract deployed successfully!');
        console.log('üìã Contract ID:', contractId);
        
        // Validate contract ID before proceeding
        if (!contractId) {
            throw new Error('FairWage Contract ID not returned from backend - deployment may have failed');
        }
        
        // Store contract ID in local storage
        if (typeof window !== 'undefined') {
            localStorage.setItem('fairWageContractId', contractId);
        }
        
        return contractId;
        
    } catch (error) {
        console.error("‚ùå FairWage Contract deployment failed!", error);
        throw error;
    }
};

// Get stored contract IDs
export const getStoredContractIds = (): { tokenContractId?: string, fairWageContractId?: string } => {
    if (typeof window === 'undefined') return {};
    
    return {
        tokenContractId: localStorage.getItem('tokenContractId') || undefined,
        fairWageContractId: localStorage.getItem('fairWageContractId') || undefined
    };
};

// Get contract info
export const getContractInfo = async (): Promise<any> => {
    try {
        const contractId = getContractId();
        console.log('üìã Getting contract info for:', contractId);
        
        // Use backend API to get contract info
        const response = await fetch(`/api/contract-info?contractId=${contractId}`);
        
        if (!response.ok) {
            throw new Error(`Failed to get contract info: ${response.status}`);
        }
        
        const contractInfo = await response.json();
        console.log('‚úÖ Contract info retrieved:', contractInfo);
        
        return contractInfo;
    } catch (error) {
        console.error('‚ùå Failed to get contract info:', error);
        throw error;
    }
};

// Set contract ID
export const setContractId = (contractId: string): void => {
    if (typeof window !== 'undefined') {
        localStorage.setItem('fairWageContractId', contractId);
    }
};

export const getCurrentContractId = (): string => {
    return getContractId();
};

// Fetch accrued balance
export const fetchAccruedBalance = async (employeeAddress: string): Promise<bigint> => {
    try {
        console.log('üí∞ Fetching accrued balance for:', employeeAddress);
        
        const response = await fetch('/api/accrued-balance', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                employeeAddress,
                contractId: getContractId()
            })
        });
        
        if (!response.ok) {
            throw new Error(`Failed to fetch balance: ${response.status}`);
        }
        
        const result = await response.json();
        const balance = BigInt(result.balance || 0);
        
            console.log('‚úÖ Accrued balance:', balance.toString());
            return balance;
    } catch (error) {
        console.error('‚ùå Failed to fetch accrued balance:', error);
        throw error;
    }
};

// Get network health
export const getNetworkHealth = async () => {
    try {
        console.log('üåê Checking network health...');
        
        // Initialize servers if needed
        if (!server) {
            initializeServers();
        }
        
        if (!server) {
            throw new Error('Server not initialized');
        }
        
        const latestLedger = await server.getLatestLedger();
        console.log('‚úÖ Network is healthy, latest ledger:', latestLedger.sequence);
        
        return {
            healthy: true,
            latestLedger: latestLedger.sequence,
            timestamp: new Date().toISOString()
        };
    } catch (error) {
        console.error('‚ùå Network health check failed:', error);
        return {
            healthy: false,
            error: error instanceof Error ? error.message : 'Unknown error',
            timestamp: new Date().toISOString()
        };
    }
};

// Get account info
export const getAccountInfo = async (accountId: string) => {
    try {
        console.log('üë§ Getting account info for:', accountId);
        
        // Initialize servers if needed
        if (!horizon) {
            initializeServers();
        }
        
        if (!horizon) {
            throw new Error('Horizon server not initialized');
        }
        
        const account = await horizon.accounts().accountId(accountId).call();
        console.log('‚úÖ Account info retrieved');
        
        return account;
    } catch (error) {
        console.error('‚ùå Failed to get account info:', error);
        throw error;
    }
};

// Get account transactions
export const getAccountTransactions = async (accountId: string, limit: number = 20) => {
    try {
        console.log('üìä Getting transactions for:', accountId);
        
        if (!horizon) {
            throw new Error('Horizon server not initialized');
        }
        
        const transactions = await horizon.transactions()
            .forAccount(accountId)
            .limit(limit)
            .order('desc')
            .call();
            
        console.log('‚úÖ Transactions retrieved:', transactions.records.length);
        return transactions.records;
    } catch (error) {
        console.error('‚ùå Failed to get transactions:', error);
        throw error;
    }
};

// Get recent transactions
export const getRecentTransactions = async (limit: number = 20) => {
    try {
        const publicKey = await connectWallet();
        return await getAccountTransactions(publicKey, limit);
    } catch (error) {
        console.error('‚ùå Failed to get recent transactions:', error);
        throw error;
    }
};

// Get contract events
export const getContractEvents = async (startLedger?: number, limit: number = 100) => {
    try {
        console.log('üìã Getting contract events...');
        
        const contractId = getContractId();
        const events = await server.getEvents({
            startLedger,
            filters: [{
                type: 'contract',
                contractIds: [contractId]
            }],
            limit
        });
        
        console.log('‚úÖ Contract events retrieved:', events.length);
        return events;
    } catch (error) {
        console.error('‚ùå Failed to get contract events:', error);
        throw error;
    }
};

// Update Employee Wage Rate
export const updateEmployeeWageRate = async (
    fairWageContractId: string,
    employeeAddress: string,
    newWageRate: number
): Promise<string> => {
    try {
        console.log('üí∞ Updating wage rate for employee:', { 
            fairWageContractId, 
            employeeAddress, 
            newWageRate 
        });
        
        // Get user public key from Rabet
        if (!window.rabet) {
            throw new Error('Rabet wallet not found. Please install Rabet extension.');
        }
        
        const { publicKey } = await window.rabet.connect();
        if (!publicKey) {
            throw new Error('Failed to get public key from Rabet');
        }
        
        console.log('‚úÖ Got public key from Rabet:', publicKey);
        
        // Prepare update wage rate transaction
        const response = await fetch(`http://localhost:3001/api/update-wage-rate`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userPublicKey: publicKey,
                fairWageContractId,
                employeeAddress,
                newWageRate
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Backend error: ${errorData.error || 'Unknown error'}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Got transaction XDR from backend');
        console.log('üìã Transaction XDR:', result.transactionXdr);
        console.log('üîó Validate at: https://laboratory.stellar.org/#xdr-viewer');
        
        // Sign transaction with Rabet
        console.log('üîê Signing transaction with Rabet...');
        const signedTx = await window.rabet.sign(result.transactionXdr, StellarSdk.Networks.TESTNET);
        console.log('‚úÖ Transaction signed successfully');
        
        // Submit transaction
        console.log('üì° Submitting to Stellar network...');
        const submitResponse = await fetch('https://soroban-testnet.stellar.org', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                jsonrpc: '2.0',
                id: 1,
                method: 'sendTransaction',
                params: {
                    transaction: signedTx.xdr
                }
            })
        });

        if (!submitResponse.ok) {
            throw new Error(`Failed to submit transaction: ${submitResponse.status}`);
        }

        const submitResult = await submitResponse.json();
        
        console.log('üìã Submit response:', submitResult);
        
        if (submitResult.error) {
            console.error('‚ùå Submit error:', submitResult.error);
            throw new Error(`Transaction failed: ${JSON.stringify(submitResult.error)}`);
        }

        if (!submitResult.result || !submitResult.result.hash) {
            console.error('‚ùå No transaction hash in result:', submitResult);
            throw new Error(`No transaction hash received: ${JSON.stringify(submitResult)}`);
        }

        console.log('üéâ Wage rate updated successfully!');
        console.log('üìã Transaction Hash:', submitResult.result.hash);
        
        return submitResult.result.hash;
        
    } catch (error) {
        console.error('‚ùå Failed to update wage rate:', error);
        throw error;
    }
};

// ========================================
// EMPLOYEE MANAGEMENT FUNCTIONS
// ========================================

// Add Employee to FairWage Contract
export const addEmployee = async (
    fairWageContractId: string,
    employeeAddress: string,
    employeeName: string,
    wageRate: number,
    wagePeriod: string = 'hour'
): Promise<string> => {
    try {
        console.log('üë§ Adding employee to FairWage contract:', { 
            fairWageContractId, 
            employeeAddress, 
            employeeName, 
            wageRate 
        });
        
        // Get user public key from Rabet
        if (!window.rabet) {
            throw new Error('Rabet wallet not found. Please install Rabet extension.');
        }
        
        const { publicKey } = await window.rabet.connect();
        if (!publicKey) {
            throw new Error('Failed to get public key from Rabet');
        }
        
        console.log('‚úÖ Got public key from Rabet:', publicKey);
        
        // Convert wage period string to integer
        const wagePeriodMap: { [key: string]: number } = {
            'hour': 0,
            'day': 1,
            'week': 2,
            'month': 3
        };
        
        console.log('üîç DEBUG WAGE PERIOD:');
        console.log('üìã Input wagePeriod:', wagePeriod);
        console.log('üìã wagePeriod type:', typeof wagePeriod);
        
        const wagePeriodInt = wagePeriodMap[wagePeriod] || 1; // Default to day
        
        console.log('üìã Final wagePeriodInt:', wagePeriodInt);
        console.log('üìã Mapping result:', wagePeriodMap[wagePeriod]);
        
        if (wagePeriodInt !== wagePeriodMap[wagePeriod]) {
            console.log('‚ö†Ô∏è WARNING: Using default value (day) instead of mapped value!');
        }
        
        // Prepare add employee transaction
        const response = await fetch(`http://localhost:3001/api/add-employee`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userPublicKey: publicKey,
                fairWageContractId,
                employeeAddress,
                employeeName,
                wageRate,
                wagePeriod: wagePeriodInt
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Backend error: ${errorData.error || 'Unknown error'}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Got add employee transaction XDR from backend');
        
        // Sign the transaction with Rabet
        const signResult = await window.rabet.sign(result.transactionXdr, StellarSdk.Networks.TESTNET);
        const signedXdr = signResult.xdr;
        
        console.log('‚úÖ Add employee transaction signed successfully');
        
        // Submit the signed transaction
        const submitResponse = await fetch(`http://localhost:3001/api/submit-transaction`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                signedTransactionXdr: signedXdr
            })
        });
        
        if (!submitResponse.ok) {
            const errorData = await submitResponse.json();
            throw new Error(`Transaction submission failed: ${errorData.error || 'Unknown error'}`);
        }
        
        const submitResult = await submitResponse.json();
        console.log('‚úÖ Employee added successfully to FairWage contract!');
        console.log('üìã Transaction Hash:', submitResult.transactionHash);
        
        return submitResult.transactionHash;
        
    } catch (error) {
        console.error('‚ùå Failed to add employee:', error);
        throw error;
    }
};

// Remove Employee from FairWage Contract
export const removeEmployee = async (
    fairWageContractId: string,
    employeeAddress: string
): Promise<string> => {
    try {
        console.log('üóëÔ∏è Removing employee from FairWage contract:', { 
            fairWageContractId, 
            employeeAddress 
        });
        
        // Get user public key from Rabet
        if (!window.rabet) {
            throw new Error('Rabet wallet not found. Please install Rabet extension.');
        }
        
        const { publicKey } = await window.rabet.connect();
        if (!publicKey) {
            throw new Error('Failed to get public key from Rabet');
        }
        
        console.log('‚úÖ Got public key from Rabet:', publicKey);
        
        // Prepare remove employee transaction
        const response = await fetch(`http://localhost:3001/api/remove-employee`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userPublicKey: publicKey,
                fairWageContractId,
                employeeAddress
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Backend error: ${errorData.error || 'Unknown error'}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Got remove employee transaction XDR from backend');
        
        // Sign the transaction with Rabet
        const signResult = await window.rabet.sign(result.transactionXdr, StellarSdk.Networks.TESTNET);
        const signedXdr = signResult.xdr;
        
        console.log('‚úÖ Remove employee transaction signed successfully');
        
        // Submit the signed transaction
        const submitResponse = await fetch(`http://localhost:3001/api/submit-transaction`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                signedTransactionXdr: signedXdr
            })
        });
        
        if (!submitResponse.ok) {
            const errorData = await submitResponse.json();
            throw new Error(`Transaction submission failed: ${errorData.error || 'Unknown error'}`);
        }
        
        const submitResult = await submitResponse.json();
        console.log('‚úÖ Employee removed successfully from FairWage contract!');
        console.log('üìã Transaction Hash:', submitResult.transactionHash);
        
        return submitResult.transactionHash;
        
    } catch (error) {
        console.error('‚ùå Failed to remove employee:', error);
        throw error;
    }
};

// Pay Employee
export const payEmployee = async (
    fairWageContractId: string,
    employeeAddress: string,
    amount: number
): Promise<string> => {
    try {
        console.log('üí∏ Paying employee:', { 
            fairWageContractId, 
            employeeAddress 
        });
        
        // Get user public key from Rabet
        if (!window.rabet) {
            throw new Error('Rabet wallet not found. Please install Rabet extension.');
        }
        
        const { publicKey } = await window.rabet.connect();
        if (!publicKey) {
            throw new Error('Failed to get public key from Rabet');
        }
        
        console.log('‚úÖ Got public key from Rabet:', publicKey);
        
        // Prepare pay employee transaction
        const response = await fetch(`http://localhost:3001/api/pay-employee`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userPublicKey: publicKey,
                fairWageContractId,
                employeeAddress,
                amount
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Backend error: ${errorData.error || 'Unknown error'}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Got pay employee transaction XDR from backend');
        
        // Sign the transaction with Rabet
        const signResult = await window.rabet.sign(result.transactionXdr, StellarSdk.Networks.TESTNET);
        const signedXdr = signResult.xdr;
        
        console.log('‚úÖ Pay employee transaction signed successfully');
        
        // Submit the signed transaction
        const submitResponse = await fetch(`http://localhost:3001/api/submit-transaction`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                signedTransactionXdr: signedXdr
            })
        });
        
        if (!submitResponse.ok) {
            const errorData = await submitResponse.json();
            throw new Error(`Transaction submission failed: ${errorData.error || 'Unknown error'}`);
        }
        
        const submitResult = await submitResponse.json();
        console.log('‚úÖ Employee paid successfully!');
        console.log('üìã Transaction Hash:', submitResult.transactionHash);
        
        return submitResult.transactionHash;
        
    } catch (error) {
        console.error('‚ùå Failed to pay employee:', error);
        throw error;
    }
};

// Pay All Wages for Employee
export const payAllWages = async (
    fairWageContractId: string,
    employeeAddress: string
): Promise<string> => {
    try {
        console.log('üí∞ Paying all wages for employee:', { 
            fairWageContractId, 
            employeeAddress 
        });
        
        // Get user public key from Rabet
        if (!window.rabet) {
            throw new Error('Rabet wallet not found. Please install Rabet extension.');
        }
        
        const { publicKey } = await window.rabet.connect();
        if (!publicKey) {
            throw new Error('Failed to get public key from Rabet');
        }
        
        console.log('‚úÖ Got public key from Rabet:', publicKey);
        
        // Prepare pay all wages transaction
        const response = await fetch(`http://localhost:3001/api/pay-all-wages`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userPublicKey: publicKey,
                fairWageContractId,
                employeeAddress
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Backend error: ${errorData.error || 'Unknown error'}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Got pay all wages transaction XDR from backend');
        
        // Sign the transaction with Rabet
        const signResult = await window.rabet.sign(result.transactionXdr, StellarSdk.Networks.TESTNET);
        const signedXdr = signResult.xdr;
        
        console.log('‚úÖ Pay all wages transaction signed successfully');
        
        // Submit the signed transaction
        const submitResponse = await fetch(`http://localhost:3001/api/submit-transaction`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                signedTransactionXdr: signedXdr
            })
        });
        
        if (!submitResponse.ok) {
            const errorData = await submitResponse.json();
            throw new Error(`Transaction submission failed: ${errorData.error || 'Unknown error'}`);
        }
        
        const submitResult = await submitResponse.json();
        console.log('‚úÖ All wages paid successfully!');
        console.log('üìã Transaction Hash:', submitResult.transactionHash);
        
        return submitResult.transactionHash;
        
    } catch (error) {
        console.error('‚ùå Failed to pay all wages:', error);
        throw error;
    }
};

// Fund contract with tokens
export const fundContract = async (
    fairWageContractId: string,
    tokenContractId: string,
    amount: number
): Promise<string> => {
    try {
        console.log('üí∞ Funding contract...');
        console.log('üìã FairWage Contract ID:', fairWageContractId);
        console.log('üìã Token Contract ID:', tokenContractId);
        console.log('üìã Amount:', amount);

        // Get user's public key
        const publicKey = await connectWallet();
        console.log('üéâ Address received:', publicKey);
        
        // Call backend to prepare transaction
        const response = await fetch('http://localhost:3001/api/fund-contract', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userPublicKey: publicKey,
                fairWageContractId,
                tokenContractId,
                amount
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Got transaction XDR from backend');
        console.log('üìã Transaction XDR:', result.transactionXdr);

        // Validate transaction at Stellar Laboratory
        console.log('üîó Validate at: https://laboratory.stellar.org/#xdr-viewer');

        // Sign transaction with Rabet
        console.log('üîê Signing transaction with Rabet...');
        const signResult = await window.rabet.sign(result.transactionXdr, StellarSdk.Networks.TESTNET);
        
        if (signResult.error) {
            throw new Error(`Failed to sign with Rabet: ${signResult.error}`);
        }
        
        const signedTx = signResult.xdr;

        console.log('‚úÖ Transaction signed successfully');

        // Submit transaction to network
        console.log('üì° Submitting to Stellar network...');
        const submitResponse = await fetch('https://soroban-testnet.stellar.org', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                jsonrpc: '2.0',
                id: 1,
                method: 'sendTransaction',
                params: {
                    transaction: signedTx
                }
            })
        });

        if (!submitResponse.ok) {
            throw new Error(`Failed to submit transaction: ${submitResponse.status}`);
        }

        const submitResult = await submitResponse.json();
        
        if (submitResult.error) {
            throw new Error(`Transaction failed: ${submitResult.error.message}`);
        }

        console.log('üéâ Contract funded successfully!');
        console.log('üìã Transaction Hash:', submitResult.result.hash);
        
        return submitResult.result.hash;
        
    } catch (error) {
        console.error('‚ùå Failed to fund contract:', error);
        throw error;
    }
};

// Check contract balance (read-only, no signing needed)
export const checkContractBalance = async (
    fairWageContractId: string,
    tokenContractId: string
): Promise<number> => {
    try {
        console.log('üí∞ Checking contract balance (read-only)...');
        console.log('üìã FairWage Contract ID:', fairWageContractId);
        console.log('üìã Token Contract ID:', tokenContractId);

        // Call backend to get balance (no signing needed)
        const response = await fetch('http://localhost:3001/api/check-contract-balance', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                fairWageContractId,
                tokenContractId
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log('‚úÖ Contract balance retrieved:', result.balance);
        
        return result.balance;
    } catch (error) {
        console.error('‚ùå Failed to check contract balance:', error);
        throw error;
    }
};

// Fix employee timestamp function
export const fixEmployeeTimestamp = async (
    fairWageContractId: string,
    employeeAddress: string
): Promise<string> => {
    try {
        console.log('üîß Fixing employee timestamp:', { 
            fairWageContractId, 
            employeeAddress 
        });
        
        // Get user public key from Rabet
        if (!window.rabet) {
            throw new Error('Rabet wallet not found. Please install Rabet extension.');
        }
        
        const { publicKey } = await window.rabet.connect();
        if (!publicKey) {
            throw new Error('Failed to get public key from Rabet');
        }
        
        console.log('‚úÖ Got public key from Rabet:', publicKey);
        
        // Prepare fix timestamp transaction
        const response = await fetch(`http://localhost:3001/api/fix-employee-timestamp`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userPublicKey: publicKey,
                fairWageContractId,
                employeeAddress
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Backend error: ${errorData.error || 'Unknown error'}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Got fix timestamp transaction XDR from backend');
        
        // Sign the transaction with Rabet
        const signResult = await window.rabet.sign(result.transactionXdr, StellarSdk.Networks.TESTNET);
        const signedXdr = signResult.xdr;
        
        console.log('‚úÖ Fix timestamp transaction signed successfully');
        
        // Submit the signed transaction
        const submitResponse = await fetch(`http://localhost:3001/api/submit-transaction`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                signedTransactionXdr: signedXdr
            })
        });
        
        if (!submitResponse.ok) {
            const errorData = await submitResponse.json();
            throw new Error(`Transaction submission failed: ${errorData.error || 'Unknown error'}`);
        }
        
        const submitResult = await submitResponse.json();
        console.log('‚úÖ Employee timestamp fixed successfully!');
        console.log('üìã Transaction Hash:', submitResult.transactionHash);
        
        return submitResult.transactionHash;
        
    } catch (error) {
        console.error('‚ùå Failed to fix employee timestamp:', error);
        throw error;
    }
};

// Initialize contract function
export const initializeContract = async (
    contractId: string, 
    contractType: 'token' | 'fairwage', 
    companyName: string, 
    tokenName?: string, 
    tokenSymbol?: string, 
    tokenContractId?: string
): Promise<string> => {
    try {
        console.log('üîß Initializing contract:', contractId);
        console.log('üìã Contract type:', contractType);
        
        // Get user public key from Rabet
        if (!window.rabet) {
            throw new Error('Rabet wallet not found. Please install Rabet extension.');
        }
        
        const { publicKey } = await window.rabet.connect();
        if (!publicKey) {
            throw new Error('Failed to get public key from Rabet');
        }
        
        console.log('‚úÖ Got public key from Rabet:', publicKey);
        
        // Prepare initialization transaction
        const response = await fetch(`http://localhost:3001/api/initialize-contract`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                contractId,
                contractType,
                userPublicKey: publicKey,
                tokenContractId,
                companyName,
                tokenName,
                tokenSymbol
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Backend error: ${errorData.error || 'Unknown error'}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Got initialization transaction XDR from backend');
        
        // Sign the transaction with Rabet
        const signResult = await window.rabet.sign(result.transactionXdr, StellarSdk.Networks.TESTNET);
        const signedXdr = signResult.xdr;
        
        console.log('‚úÖ Transaction signed successfully');
        
        // Submit the signed transaction to backend
        const submitResponse = await fetch(`http://localhost:3001/api/submit-transaction`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                signedTransactionXdr: signedXdr, 
                contractType: contractType 
            })
        });
        
        const submitResult = await submitResponse.json();
        
        if (!submitResult.success) {
            throw new Error(`Initialization failed: ${submitResult.error}`);
        }
        
        console.log('‚úÖ Contract initialized successfully!');
        return contractId;
        
    } catch (error) {
        console.error("‚ùå Contract initialization failed!", error);
        throw error;
    }
};

// Deposit funds to contract
export const depositFunds = async (amount: bigint): Promise<void> => {
    try {
        console.log('üí∞ Depositing funds to contract...');
        console.log('üíµ Amount:', amount.toString());
        
        const contractId = getContractId();
        const publicKey = await connectWallet();
        
        // Use backend API for deposit transaction
        const response = await fetch('/api/deposit-funds', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                contractId,
                employerAddress: publicKey,
                amount: amount.toString()
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || `Deposit failed with status ${response.status}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Funds deposited successfully:', result);
        
    } catch (error) {
        console.error('‚ùå Failed to deposit funds:', error);
        throw error;
    }
};

// Get accrued balance from contract
export async function getAccruedBalance(fairWageContractId: string, employeeAddress: string): Promise<number> {
    try {
        const response = await fetch('http://localhost:3001/api/get-accrued-balance', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                fairWageContractId,
                employeeAddress
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.error || 'Failed to get accrued balance');
        }

        return parseInt(data.balance.toString());
    } catch (error) {
        console.error('‚ùå Error getting accrued balance:', error);
        throw error;
    }
}

// Get employee info from contract
export async function getEmployeeInfo(fairWageContractId: string, employeeAddress: string): Promise<any> {
    try {
        const response = await fetch('http://localhost:3001/api/get-employee-info', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                fairWageContractId,
                employeeAddress
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.error || 'Failed to get employee info');
        }

        return data.employeeInfo;
    } catch (error) {
        console.error('‚ùå Error getting employee info:', error);
        throw error;
    }
}

// Get contract balance
export async function getContractBalance(fairWageContractId: string): Promise<number> {
    try {
        const response = await fetch('http://localhost:3001/api/get-contract-balance', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                fairWageContractId
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.error || 'Failed to get contract balance');
        }

        return parseInt(data.balance.toString());
    } catch (error) {
        console.error('‚ùå Error getting contract balance:', error);
        throw error;
    }
}

// Pay partial by employer
export async function payPartialByEmployer(fairWageContractId: string, employeeAddress: string, amount: number): Promise<string> {
    try {
        console.log('üí∞ Paying partial by employer...', { fairWageContractId, employeeAddress, amount });

        // Get public key from Rabet
        const publicKey = await connectWallet();
        console.log('‚úÖ Got public key from Rabet:', publicKey);

        // Prepare transaction
        const response = await fetch('http://localhost:3001/api/pay-partial-employer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userPublicKey: publicKey,
                fairWageContractId,
                employeeAddress,
                amount
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Backend error: ${errorData.error || 'Failed to prepare pay partial transaction'}`);
        }

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.error || 'Failed to prepare pay partial transaction');
        }

        console.log('‚úÖ Pay partial transaction prepared successfully');

        // Sign transaction with Rabet
        console.log('üîê Signing transaction with Rabet...');
        const signedTx = await window.rabet.sign(data.transactionXdr, StellarSdk.Networks.TESTNET);
        console.log('‚úÖ Transaction signed successfully');

        // Submit to network
        console.log('üì° Submitting to Stellar network...');
        const submitResponse = await fetch('http://localhost:3001/api/submit-transaction', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                signedTransactionXdr: signedTx.xdr
            })
        });

        if (!submitResponse.ok) {
            const errorData = await submitResponse.json();
            throw new Error(`Submit error: ${errorData.error || 'Failed to submit transaction'}`);
        }

        const submitData = await submitResponse.json();
        console.log('‚úÖ Pay partial transaction submitted successfully:', submitData.transactionHash);

        return submitData.transactionHash;

    } catch (error) {
        console.error('‚ùå Failed to pay partial by employer:', error);
        throw error;
    }
}

// Load employees from contract
export async function loadEmployeesFromContract(fairWageContractId: string): Promise<any[]> {
    try {
        console.log('üë• Loading employees from contract...', { fairWageContractId });

        // Get public key from Rabet
        const publicKey = await connectWallet();
        console.log('‚úÖ Got public key from Rabet:', publicKey);

        // For now, return empty array since we don't have a list_employees function
        // This would need to be implemented in the contract
        console.log('‚ö†Ô∏è No list_employees function available in contract');
        return [];

    } catch (error) {
        console.error('‚ùå Failed to load employees from contract:', error);
        throw error;
    }
}

// Pay all employees at once
export async function payAllEmployees(fairWageContractId: string, employeeAddresses: string[]): Promise<string> {
    try {
        console.log('üí∞ Paying all employees...', { fairWageContractId, employeeAddresses });

        // Get public key from Rabet
        const publicKey = await connectWallet();
        console.log('‚úÖ Got public key from Rabet:', publicKey);

        // Prepare transaction
        const response = await fetch('http://localhost:3001/api/payday-sweep-many', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userPublicKey: publicKey,
                fairWageContractId,
                employeeAddresses
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Backend error: ${errorData.error || 'Failed to prepare pay all transaction'}`);
        }

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.error || 'Failed to prepare pay all transaction');
        }

        console.log('‚úÖ Pay all transaction prepared successfully');

        // Sign transaction with Rabet
        console.log('üîê Signing transaction with Rabet...');
        const signedTx = await window.rabet.sign(data.transactionXdr, StellarSdk.Networks.TESTNET);
        console.log('‚úÖ Transaction signed successfully');

        // Submit to network
        console.log('üì° Submitting to Stellar network...');
        const submitResponse = await fetch('http://localhost:3001/api/submit-transaction', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                signedTransactionXdr: signedTx.xdr
            })
        });

        if (!submitResponse.ok) {
            const errorData = await submitResponse.json();
            throw new Error(`Submit error: ${errorData.error || 'Failed to submit transaction'}`);
        }

        const submitData = await submitResponse.json();
        console.log('‚úÖ Pay all transaction submitted successfully:', submitData.transactionHash);

        return submitData.transactionHash;

    } catch (error) {
        console.error('‚ùå Failed to pay all employees:', error);
        throw error;
    }
}

export { server, horizon, networkType };
